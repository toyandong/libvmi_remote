#本地使用libvmi
def list_processes(vmi):
    tasksOffset = vmi.get_offset("linux_tasks")
    nameOffset = vmi.get_offset("linux_name")
    pidOffset = vmi.get_offset("linux_pid")
    init_task_va = vmi.translate_ksym2v("init_task")
    processes = vmi.read_addr_va(init_task_va+tasksOffset, 0)
    print init_task_va,processes
    print type(tasksOffset),type(nameOffset),type(pidOffset),type(init_task_va),type(processes)
    current_process = processes

    while True:
        pid = vmi.read_32_va(current_process+pidOffset-tasksOffset, 0)
        procname = vmi.read_str_va(current_process+nameOffset-tasksOffset, 0)
        print  current_process+pidOffset-tasksOffset,pid,type(pid)
        print  current_process+nameOffset-tasksOffset,procname,type(procname)

        current_process = vmi.read_addr_va(current_process,0)
        print current_process
        
        if current_process == processes:
            break

    return

list_processes(vmi)



#socket调用libvmi函数的主题代码
def list_processes(vmID):
    tasksOffset = int(pyvmi_rpc_send(0, "get_offset","linux_tasks"))
    nameOffset = int(pyvmi_rpc_send(0, "get_offset","linux_name"))
    pidOffset = int(pyvmi_rpc_send(0, "get_offset","linux_pid"))
    init_task_va = long(pyvmi_rpc_send(0, "translate_ksym2v","init_task"))
    processes = long(pyvmi_rpc_send(0, "read_addr_va",init_task_va+tasksOffset,0))
    current_process = processes
    while True:
        pid = int(pyvmi_rpc_send(0,"read_32_va",current_process+pidOffset-tasksOffset,0))
        procname = pyvmi_rpc_send(0,"read_str_va",current_process+nameOffset-tasksOffset,0)
        print pid, procname
        current_process = long(pyvmi_rpc_send(0,"read_addr_va",current_process,0))
        if current_process == processes:
            break
    return
#dom0 to be watched
dom0List=[["127.0.0.1",8001]]
#vm to be watched
vmList=[["VM1-ovs"]]
#socket handles to stored
pyvmi_rpc_list=[]
#libvmi handles  are stored in dom0. 
print dom0List[0][0],dom0List[0][1]

pyvmi_rpc_conn(dom0List)
pyvmi_rpc_init(vmList)
list_processes(0)
pyvmi_rpc_close(pyvmi_rpc_list)
